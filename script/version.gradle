
/**
 * This task will trigger a new major release. An exception will be thrown if the desired version
 * name segment or the version code couldn't be incremented properly. This task will trigger the
 * production environment to perform the actual release. Local releases can only be performed
 * manually for now.
 *
 * The flow for triggering the release is as follows:
 *
 * 1. Get the version name and version code from the latest tag's subject line.
 * 2. Split the version name into ${major}.${minor}.${patch} segments.
 * 3. Increase the ${major} segment and the version code by one.
 * 4. Create a new annotated tag and push it to the remote repository.
 */
task prepareMajorRelease(dependsOn: ':library:testReleaseUnitTest') {
    doLast {
        def version = getVersionFromLatestTag()
        def (major, minor, patch, build) = version.tokenize()
        def nextMajor = (major.toInteger() + 1).toString()
        def newVersionName = "${nextMajor}.0.0"
        def oldVersionName = getLatestReleaseTagName()
        createNewTag(oldVersionName, newVersionName, nextMajor, "0", "0", build)
    }
}

/**
 * This task will trigger a new minor release. An exception will be thrown if the desired version
 * name segment or the version code couldn't be incremented properly. This task will trigger the
 * production environment to perform the actual release. Local releases can only be performed
 * manually for now.
 *
 * The flow for triggering the release is as follows:
 *
 * 1. Get the version name and version code from the latest tag's subject line.
 * 2. Split the version name into ${major}.${minor}.${patch} segments.
 * 3. Increase the ${minor} segment and the version code by one.
 * 4. Create a new annotated tag and push it to the remote repository.
 */
task prepareMinorRelease(dependsOn: ':library:testReleaseUnitTest') {
    doLast {
        def version = getVersionFromLatestTag()
        def (major, minor, patch, build) = version.tokenize()
        def nextMinor = (minor.toInteger() + 1).toString()
        def newVersionName = "${major}.${nextMinor}.0"
        def oldVersionName = getLatestReleaseTagName()
        createNewTag(oldVersionName, newVersionName, major, nextMinor, "0", build)
    }
}

/**
 * This task will trigger a new patch release. An exception will be thrown if the desired version
 * name segment or the version code couldn't be incremented properly. This task will trigger the
 * production environment to perform the actual release. Local releases can only be performed
 * manually for now.
 *
 * The flow for triggering the release is as follows:
 *
 * 1. Get the version name and version code from the latest tag's subject line.
 * 2. Split the version name into ${major}.${minor}.${patch} segments.
 * 3. Increase the ${patch} segment and the version code by one.
 * 4. Create a new annotated tag and push it to the remote repository.
 */
task preparePatchRelease(dependsOn: ':library:testReleaseUnitTest') {
    doLast {
        def version = getVersionFromLatestTag()
        def (major, minor, patch, build) = version.tokenize()
        def nextPatch = (patch.toInteger() + 1).toString()
        def newVersionName = "${major}.${minor}.${nextPatch}"
        def oldVersionName = getLatestReleaseTagName()
        createNewTag(oldVersionName, newVersionName, major, minor, nextPatch, build)
    }
}

/**
 * This task will trigger a new SNAPSHOT release. An exception will be thrown if the desired version
 * name segment or the version code couldn't be incremented properly. This task will trigger the
 * production environment to perform the actual release. Local releases can only be performed
 * manually for now.
 *
 * The flow for triggering the release is as follows:
 *
 * 1. Get the version name and version code from the latest tag's subject line.
 * 2. Split the version name into ${major}.${minor}.${patch} segments.
 * 3. Increase the ${patch} segment and the version code by one.
 * 4. Create a new annotated tag and push it to the remote repository.
 */
task prepareSnapshotRelease(dependsOn: ':library:testReleaseUnitTest') {
    doLast {
        def version = getVersionFromLatestTag()
        def (major, minor, patch, build) = version.tokenize()
        def nextBuild = (build.toInteger() + 1).toString()
        def newVersionName = "${major}.${minor}.${patch}-${nextBuild}-SNAPSHOT"
        def oldVersionName = getLatestReleaseTagName()
        createNewTag(oldVersionName, newVersionName, major, minor, patch, nextBuild)
    }
}

/**
 * This task will generate new JavaDoc and push it to the remote 'gh-pages' branch.
 * 
 * The flow for triggering the JavaDoc release is as follows:
 *
 * 1. Temporarily add and commit the generated JavaDoc.
 * 2. Split out the JavaDoc directory to the root of the local gh-pages branch.
 * 3. Force push to the remote repositoy.
 * 4. Delete the local gh-pages branch.
 * 5. Delete the temporary commit.
 */
task updateRemoteJavaDoc(dependsOn: ':library:javadocRelease') {
    doLast {
        "git add docs".bash()
        "git commit --message 'javadoc'".bash()
        "git subtree split --prefix docs -b gh-pages".bash()
        "git push -f origin gh-pages:gh-pages".bash()
        "git branch -D gh-pages".bash()
        "git reset HEAD~1 --hard".bash()
    }
}

/**
 * Prepares the current version name to use for the project. The version name will follow the SEMVER
 * pattern of ${major}.${minor}.${patch}. If this method is called from a non-production environment
 * then "-SNAPSHOT" will be appended to the version name. The parts of the version name will be
 * extracted from the latest release tag in git repository.
 *
 * @return The version name or an empty string
 */
ext.prepareVersionName = {
    def version = getVersionFromLatestTag()
    def (major, minor, patch, build) = version.tokenize()
    def versionName = "${major}.${minor}.${patch}"
    println(versionName)
    return versionName
}

/**
 * Returns the official version code for this library.
 */
ext.prepareVersionCode = {
    def version = getVersionFromLatestTag()
    def (major, minor, patch, build) = version.tokenize()
    return build.toInteger()
}

/**
 * Returns the latest version tag
 */
private def getLatestReleaseTagName() {
    // Fetch all tags from remote
    "git fetch origin 'refs/tags/*:refs/tags/*'".bash()
    
    // Get the latest tag that looks something like "v1.2.3".
    // --count=1 is for getting one match
    // --sort=-taggerdate is for sorting on descending (the '-') tag created date
    // 'refs/tags/...' is the pattern of the tag name to match
    return "git for-each-ref --count=1 --sort=-taggerdate --format='%(tag)' 'refs/tags/v[0-9]*.[0-9]*.[0-9]*'".bash().trim()
}

/**
 * Fetches all tags from the remote repository and extracts the version name and
 * build number from the latest release tag.
 *
 * @return The full version string: "${major} ${minor} ${path} ${build}"
 */
private def getVersionFromLatestTag() {
    // Fetch all tags from remote
    "git fetch origin 'refs/tags/*:refs/tags/*'".bash()
    
    // Get the subject line from the latest version tag
    def tag = "git for-each-ref --count=1 --sort=-taggerdate --format='%(subject)' 'refs/tags/v[0-9]*.[0-9]*.[0-9]*'".bash() // "Version x.y.z (n)"
    def filter = "s/Version\\s\\([0-9]\\{1,\\}\\).\\([0-9]\\{1,\\}\\).\\([0-9]\\{1,\\}\\)\\(.*\\)/\\1 \\2 \\3 \\4/p" // "x y z"  and maybe "(n)"
    def version = "echo '${tag}' | sed -n '${filter}'".bash().trim()
    def segments = version.tokenize()
    
    if (segments.isEmpty())
        return '0 0 0 0'
    
    if (segments.size() == 3)
        return version + ' 0'
        
    if (segments.size() == 4) {
        segments[3] = segments[3].replaceAll("[^\\d]", "")
        return segments.join(" ")
    }

    throw new IllegalArgumentException("Unexpected version format in tag: ${tag}")
}

/**
 * Creates a new annotated version tag.
 *
 * @param oldVersionName Used for collecting all commits pushed since.
 * @param newVersionName Used for creating the new tag.
 */
private def createNewTag(String oldVersionName,
        String newVersionName,
        String major,
        String minor,
        String patch,
        String build) {

    def body = "git log --pretty=format:'* %s' ${oldVersionName}..HEAD".bash()
    "git tag -a v${newVersionName} -m \"Version ${major}.${minor}.${patch} (${build})\n\n${body}\"".bash()
    presentResult(newVersionName)
}

/**
 * Shows a set of actions the user can take now that a new tag has been produced.
 *
 * @param versionName The verson name of the new tag.
 */
private def presentResult(String versionName) {
    println("\nYou can now:")
    println("  (s)how   - git show v${versionName}")
    println("  (d)elete - git tag -d v${versionName}")
    println("  (p)ush   - git push && git push --tags")
    println("  (q)uit   - quit")
    println("\nTo edit a tag you\'ll have to manually do:")
    println('      git tag -a -f ${version}\n ')
    
    handleUserInput(versionName)
}

/**
 * Performs the action chosen by the user. Waits for a valid choice.
 *
 * @param versionName The verson name of the new tag.
 */
private def handleUserInput(String versionName) {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in))
    def choice = br.readLine()
    
    switch (choice) {
        case "s":
        case "show":
            println("git show v${versionName}".bash())
            break
        case "d":
        case "delete":
            println("git tag -d v${versionName}".bash())
            break
        case "p":
        case "push":
            println("git push && git push --tags".bash())
            break
        case "q":
        case "quit":
            // Just close your eyes and let it happen
            break
        default:
            println('\nHuh?!')
            handleUserInput(versionName)
            break;
    }

}

